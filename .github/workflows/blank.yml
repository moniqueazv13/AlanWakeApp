# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: Android CI

# Define os gatilhos (triggers) para este workflow
on:
  # Aciona na criação de um Pull Request para a branch 'main'
  pull_request:
    branches: [ "main" ]
  # Aciona em qualquer push para a branch 'main'
  push:
    branches: [ "main" ]

# Define os trabalhos (jobs) que serão executados
jobs:
  # Nome do job. Pode ser qualquer nome.
  test:
    # O tipo de máquina virtual para executar o job
    runs-on: ubuntu-latest

    # Sequência de passos que compõem o job
    steps:
      # 1. Baixa o código do seu repositório para a máquina virtual
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configura o ambiente Java (JDK). Essencial para o Gradle.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. (Opcional, mas recomendado) Configura o cache do Gradle para acelerar builds futuras
      - name: Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Dá permissão de execução para o script do Gradle Wrapper
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 5. Executa a tarefa do Gradle que roda os testes unitários
      # 'testDebugUnitTest' roda os testes da variante 'debug'
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest
